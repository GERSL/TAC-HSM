function runRegressionPlot(varargin)
    %RUNREGRESSIONPLOT Summary of this function goes here
    %   Detailed explanation goes here
     
    % close all;
    addpath("TAC\");

    % Define default values
    % default_display_ids = [1:45,47,49,50,51,53];  % plot ids to analyze
    default_display_ids = [1:47,50,51,53];  % plot ids to analyze, remove 48 and 49 due to sparse observation, remove 52 due to the lack of climate data

    default_save_fig = 1;               % do not save figures
    default_save_output = 0;            % do not save R2 output
    default_use_p88 = 1;                % use HSM p88 instead of HSM p50
    default_do_plot = 1;                 % display plots
    default_remove_climateTAC = 1;       % remove climate autocorrelatino impacts from observed TAC
    default_outlierRemoval = 1;         % remove outliers using loess
    default_use_abs = 0;                 % use the absolute value of TAC
    default_msg = 1;                     % display message


    % Create input parser
    p = inputParser;
    addParameter(p, 'display_ids', default_display_ids, @isnumeric);
    addParameter(p, 'use_p88', default_use_p88, @islogical);

    addParameter(p, 'do_plot', default_do_plot, @islogical);
    addParameter(p, 'save_fig', default_save_fig, @islogical);
    addParameter(p, 'save_output', default_save_output, @islogical);

    addParameter(p, 'remove_climateTAC', default_remove_climateTAC, @islogical);
    addParameter(p, 'outlier_removed',default_outlierRemoval, @islogical);
    addParameter(p, 'use_abs', default_use_abs, @islogical);
    addParameter(p, 'msg', default_msg, @islogical);

    % Parse inputs
    parse(p, varargin{:});

    % Assign parsed values to variables
    display_ids = p.Results.display_ids;
    save_fig = p.Results.save_fig;
    save_output = p.Results.save_output;
    use_p88 = p.Results.use_p88;
    do_plot = p.Results.do_plot;
    use_abs = p.Results.use_abs;
    msg = p.Results.msg;
    remove_climateTAC = p.Results.remove_climateTAC;
    outlier_removed = p.Results.outlier_removed;

    % Display parsed values (for debugging)
    disp('Parsed inputs:');
    disp(p.Results);

    
    
    directory = '/gpfs/sharedfs1/zhulab/SCRATCH/kes20012/ProjectTACValidation/';

    %% define folder paths
    folderpath_figures = fullfile(directory,'Figures');
    if ~exist(folderpath_figures)
        mkdir(folderpath_figures);
    end

    %% load Hydraulic traits
    filename = fullfile(directory,'FieldData','hydraulic_data_compiled_allSample_HPC.xlsx');
    T_HSM = readtable(filename);

    %% Calculate correlation btw TAC and HSM
    % VIs = {'NDVI','kNDVI','NIRv','NBR','NDMI','EVI','EVI2'};
    composite_intervals = {'biweekly','monthly','bimonthly'};
    % rolling_windows_y = [1,2,3,4,5,6];
    VIs = {'NIRv'};
    rolling_windows_y = [5];
    % % empty array to hold R2
    % p50_R2_results = zeros([length(composite_intervals),length(VIs),length(rolling_windows_y)]);
    % psi_min_R2_results = zeros([length(composite_intervals),length(VIs),length(rolling_windows_y)]);
    %HSM_p50_R2_results = zeros([length(composite_intervals),length(VIs),length(rolling_windows_y)]);   
    HSM_p50_R2_results = zeros([length(VIs),length(rolling_windows_y)]);   
    HSM_p88_R2_results = zeros([length(VIs),length(rolling_windows_y)]);   

    for iV = 1:length(VIs)
        VI = VIs{iV};
        
        for ic = 2%:length(composite_intervals)
            composite_interval = composite_intervals{ic};
    
            for ir = 1:length(rolling_windows_y)
                rolling_window_y = rolling_windows_y(ir);  % rolling window in year
                switch composite_interval
                    case 'biweekly'
                        rolling_window = rolling_window_y*26;
                    case 'monthly'
                        rolling_window = rolling_window_y*12;
                    case 'bimonthly'
                        rolling_window = rolling_window_y*6;
                end
                fprintf('Processing vi=%s, composite interval=%s, rolling window = %d-year\n',...
                    VI,composite_interval,rolling_window_y);
    
                response_var = ['TAC_',VI,'_',composite_interval,'_',num2str(rolling_window)];
                response_var_short = ['TAC_',VI,'_',num2str(rolling_window)];
                response_var_Inyear = ['TAC_',VI,'_',composite_interval,'_',num2str(rolling_window_y),'year'];
                

                %% Load VI (TACt-TACt|Xac)
                if outlier_removed
                    filename = fullfile(directory,'enhancedTAC',[response_var_Inyear,'.csv']);
                else
                    filename = fullfile(directory,'enhancedTAC',[response_var_Inyear,'_noOutlierRemoval.csv']);
                end
                T = readtable(filename);
                diff = T.diff;
                clear T;

                %% Field data basic information
                point_ids = T_HSM(display_ids,:).pointID;
                plot_ids = T_HSM(display_ids,:).ID;
                plot_names = T_HSM(display_ids,:).Site;
                sample_year = T_HSM(display_ids,:).SampleYear;
                sample_month = T_HSM(display_ids,:).SampleMonth;
                rank = T_HSM(display_ids,:).rank;
                                
                % hydraulic traits
                p50 = T_HSM(display_ids,:).p50;
                p88 = T_HSM(display_ids,:).p88;
                psi_min = T_HSM(display_ids,:).Psi_min;
                HSM_p50 = T_HSM(display_ids,:).HSM_p50;
                HSM_p88 = T_HSM(display_ids,:).HSM_p88;
                
                %% only process the first rank plots (optional)
                % idx = rank==1|rank==2;
                idx = rank<=3;
                plot_ids = plot_ids(idx);
                sample_year = sample_year(idx);
                sample_month = sample_month(idx);
                p50 = p50(idx);
                p88 = p88(idx);
                psi_min = psi_min(idx);
                HSM_p50 = HSM_p50(idx);
                HSM_p88 = HSM_p88(idx);
                plot_names = plot_names(idx);
                   
                %% Loop by plotid to access TAC on the sample year
                TAC = nan(length(point_ids),1);
                for i = 1:length(point_ids)
                        
                    plotname = plot_names{i}; 
                    pointid = point_ids(i);
                    plotid = plot_ids(i);
                    % fprintf('Processing Plot %d %s, Point %d ...\n',plotid, plotname, pointid);               
                            
                    %% load the TAC_rec_cg file
                    if outlier_removed
                        folderpath_TACResults = fullfile(directory,'TACResults_FieldSample_2025-03-05/',['Landsat_',composite_interval]);
                    else
                        folderpath_TACResults = fullfile(directory,'TACResults_FieldSample_2025-03-05noOutlierRemoval/',['Landsat_',composite_interval]);
                    end
                    filepath_rcg = fullfile(folderpath_TACResults, sprintf('TAC_record_change_plot%05d.mat', pointid)); % r: row
                    load(filepath_rcg);
                        
                    % calculate annual TAC
                    TAC_annual = retime(TAC_record_change.(['TAC_',composite_interval]),"yearly","mean");
               
                    % extract TAC on the sample year month
                    year_field = sample_year(i);
                    month_field  = sample_month(i);
                    targetDate = datetime(year_field,month_field,1);
                    [~, nearestIndex] = min(abs(TAC_record_change.(['TAC_',composite_interval]).Dates - targetDate));
                    if ~isempty(nearestIndex)
                        TAC(i) = TAC_record_change.(['TAC_',composite_interval]).(response_var_short)(nearestIndex);
                    else
                        [~, nearestIndex] = min(abs(TAC_annual.Dates - datetime(year_field,1,1)));
                        % nearestIndex = find(TAC_annual.Dates== datetime(year_field,1,1)); 
                        try
                            TAC(i) = TAC_annual.(response_var_short)(nearestIndex);
                        catch
                            TAC(i) = NaN;
                        end
                    end
                end   % end of i

                %% Remove the impact of climate autocorrelation 
                if remove_climateTAC
                    TAC = TAC-diff(display_ids);
                end
                %% Use absolute values
                if use_abs
                    TAC = abs(TAC);
                end
                
                %% Calculate mean for each unique plot name
                % Convert plotnames into a numeric grouping variable
                [unique_names, ~, group_idx] = unique(plot_names);
                
                for j = 1:length(unique_names)
                    % Get the TAC values for the current group
                    group_data_1 = TAC(strcmp(plot_names, unique_names{j}));
                    % Calculate the mean
                    mean_TAC(j) = mean(group_data_1);
                    % Get the HSM_p50 values for the current group
                    if use_p88
                        group_data_2 = HSM_p88(strcmp(plot_names, unique_names{j}));
                    else
                        group_data_2 = HSM_p50(strcmp(plot_names, unique_names{j}));
                    end
                    % Calculate the mean
                    mean_HSM(j) = mean(group_data_2);
                end

                %% Fit linear regression between TAC and HSM
                mdl_3 = fitlm(mean_TAC,mean_HSM); 
                slope = mdl_3.Coefficients.Estimate(2);
                if msg
                    if slope<0
                        fprintf('HSM vs TAC Rsquared = %.3f \n',mdl_3.Rsquared.Ordinary);
                    else
                        fprintf('TAC vs HSM IS WRONG!\n')
                    end
                end
        

                if use_p88
                    if slope<0
                        HSM_p88_R2_results(iV,ir) = mdl_3.Rsquared.Ordinary;
                    else
                        HSM_p88_R2_results(iV,ir) = -1*mdl_3.Rsquared.Ordinary;
                    end
                else
                    if slope<0
                        HSM_p50_R2_results(iV,ir) = mdl_3.Rsquared.Ordinary;
                    else
                        HSM_p50_R2_results(iV,ir) = -1*mdl_3.Rsquared.Ordinary;
                    end
                end
               
            end  % end of ir
        end   % end of ic
    end   % end of iV
                    
    folderpath_output = fullfile(directory,['R2_TAC_HSM_2025-03-07'],composite_interval);
    % folderpath_output = fullfile(directory,['R2_TAC_HSM_',datestr(now, 'yyyy-mm-dd')],composite_interval);
    if ~exist(folderpath_output)
        mkdir(folderpath_output);
    end
    if save_output
        % save(fullfile(folderpath_output,'p50_R2_results.mat'),"p50_R2_results");
        % save(fullfile(folderpath_output,'psi_min_R2_results.mat'),"psi_min_R2_results");
        if use_p88
            save(fullfile(folderpath_output,'HSM_p88_R2_results.mat'),"HSM_p88_R2_results");
        else
            save(fullfile(folderpath_output,'HSM_p50_R2_results.mat'),"HSM_p50_R2_results");
        end
    end
            
    if do_plot
        %% Fig. TAC vs HSM_p50
        % Convert plotnames into a numeric grouping variable
        [unique_names, ~, group_idx] = unique(plot_names);
        % Calculate mean for each unique plot name
        mean_TAC = zeros(size(unique_names));
        mean_HSM = zeros(size(unique_names));
        for i = 1:length(unique_names)
            % Get the TAC values for the current group
            group_data_1 = TAC(strcmp(plot_names, unique_names{i}));
            % Calculate the mean
            mean_TAC(i) = mean(group_data_1);
            % Get the HSM_p50 values for the current group
            if use_p88
                group_data_2 = HSM_p88(strcmp(plot_names, unique_names{i}));
            else
                group_data_2 = HSM_p50(strcmp(plot_names, unique_names{i}));
            end
            % Calculate the mean
            mean_HSM(i) = mean(group_data_2);
        end
        
        fig = figure("Name",'TAC vs HSM');
        fig.Position = [20, 20, 500, 400];
        sz = 30;
        for ip = 1:length(unique_names)
            scatter(mean_TAC(ip),mean_HSM(ip),sz,'filled');
            text(mean_TAC(ip)-0.01,mean_HSM(ip)-0.1,unique_names{ip});
            hold on;
        end
        
        % Plot simple linear regression
        mdl_3 = fitlm(mean_TAC,mean_HSM);  
        x_fit = linspace(min(mean_TAC), max(mean_TAC), 100); % Create 100 evenly spaced x values
        [y_fit,y_ci] = predict(mdl_3, x_fit'); % Predict y values using the model
        % Plot the regression line
        plot(x_fit, y_fit, 'k-', 'LineWidth', 1.5); 
        hold on;
        % Plot the 95% confidence interval
        fill([x_fit, fliplr(x_fit)], [y_ci(:,1)', fliplr(y_ci(:,2)')], 'r', 'FaceAlpha', 0.1, 'EdgeColor', 'none'); % Shaded confidence interval
        legend('off')
        
        % add text
        dim = [.2 .01 .3 .3];
        str = sprintf('R^2 = %.2f',mdl_3.Rsquared.Ordinary);
        annotation('textbox',dim,'String',str,'FitBoxToText','on');
        
        dim1 = [.4 .6 .3 .3];
        str1 = sprintf('VI = %s, CI = %s, MW = %d yr',VI,composite_interval,rolling_windows_y(end));
        annotation('textbox',dim1,'String',str1,'FitBoxToText','on');
        
        xlabel('TAC');
        if use_p88
            ylabel('HSM p88');
        else
            ylabel('HSM p50');
        end
        
        set(gca,'FontSize',16);
        fontname(fig,'Lucida Bright');

        if save_fig
            if use_p88
                figurename = sprintf('HSM_p88vs%s.png',response_var_Inyear);
            else
                figurename = sprintf('HSM_p50vs%s.png',response_var_Inyear);
            end
            % 
            exportgraphics(gcf, fullfile(folderpath_figures,string(figurename)),'Resolution',600);
        end
    end   % end of do_plot
    
    fprintf('Complete! \n');

end   % end of func

